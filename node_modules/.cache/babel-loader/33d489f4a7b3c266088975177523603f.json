{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport './Xray.css';\nexport default class XRay extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      this.updateWidthHeight();\n      window.addEventListener('resize', this.updateWidthHeight);\n    });\n\n    _defineProperty(this, \"getDiameter\", () => {\n      let {\n        diameter,\n        resize\n      } = this.state;\n      let getMaxResWidth = this.getMaxResize(resize);\n      let newDiameter = this.matchesWindow(resize);\n\n      if (this.state.responsive) {\n        if (window.matchMedia(`(min-width: ${getMaxResWidth + 1}px)`).matches) {\n          return newDiameter > diameter ? newDiameter : diameter;\n        } else {\n          return newDiameter;\n        }\n      } else {\n        return diameter;\n      }\n    });\n\n    _defineProperty(this, \"updateWidthHeight\", () => {\n      let {\n        firstImage,\n        lastImage\n      } = this.state;\n\n      if (!firstImage && !lastImage) {\n        this.loadImages(this.firstImg).then(() => {\n          this.setState({\n            firstImage: true\n          });\n          this.loadImages(this.lastImg).then(() => {\n            this.setState({\n              lastImage: true\n            });\n            this.updateResize();\n          }).catch(error => {\n            console.log('error', error);\n          });\n        }).catch(error => {\n          console.log('error', error);\n        });\n      } else {\n        this.updateResize();\n      }\n    });\n\n    _defineProperty(this, 'loadImages', img => {\n      return new Promise(function (resolve, reject) {\n        img.onload = e => {\n          resolve(img);\n        };\n\n        img.onerror = e => {\n          reject(new Error(`Failed to load image's URL: ${url}`));\n        };\n      });\n    });\n\n    _defineProperty(this, 'updateResize', () => {\n      let {\n        beyond,\n        firstImage,\n        lastImage\n      } = this.state;\n\n      if (firstImage && lastImage) {\n        let naturalWidth = this.firstImg.naturalWidth;\n        let naturalHeight = this.firstImg.naturalHeight;\n        let percent = naturalWidth / naturalHeight;\n        let width = this.firstImg.clientWidth;\n        let height = Math.round(width / percent);\n        let dim = this.getDiameter();\n        let sensor;\n\n        if (beyond) {\n          sensor = {\n            width: width + dim,\n            height: height + dim,\n            top: -(dim / 2),\n            left: -(dim / 2)\n          };\n        } else {\n          sensor = {\n            width: width,\n            height: height,\n            top: 0,\n            left: 0\n          };\n        }\n\n        this.setState({\n          width,\n          height,\n          dim,\n          sensor\n        });\n      }\n    });\n\n    _defineProperty(this, \"getMaxResize\", diameter => {\n      let newDiameter = diameter[0].screen;\n\n      for (let i = 0; i < diameter.length; i++) {\n        if (diameter[i].screen > newDiameter) {\n          newDiameter = diameter[i].screen;\n        }\n      }\n\n      return newDiameter;\n    });\n\n    _defineProperty(this, \"matchesWindow\", diameter => {\n      let newDiameter = diameter[0].diameter;\n\n      for (let i = 0; i < diameter.length; i++) {\n        if (window.matchMedia(`(max-width: ${diameter[i].screen}px)`).matches) {\n          newDiameter = diameter[i].diameter;\n        }\n      }\n\n      return newDiameter;\n    });\n\n    _defineProperty(this, \"HoverSensor\", event => {\n      let positionX = event.nativeEvent.layerX;\n      let positionY = event.nativeEvent.layerY;\n      let {\n        sensor,\n        dim,\n        beyond\n      } = this.state;\n      let position = {\n        startY: 0,\n        endY: sensor.height,\n        startX: 0,\n        endX: sensor.width\n      };\n      let coefficient = dim / 2;\n      let zoomPosition;\n\n      if (beyond) {\n        zoomPosition = dim / 2;\n      } else {\n        zoomPosition = 0;\n      }\n\n      if (positionY >= position.startY + coefficient && positionY <= position.endY - coefficient) {\n        this.zoom.style.top = `${positionY - coefficient - zoomPosition}px`;\n        this.lastImg.style.top = `${-positionY + coefficient + zoomPosition}px`;\n      } else if (positionY < position.startY + coefficient) {\n        this.zoom.style.top = `${position.startY - zoomPosition}px`;\n        this.lastImg.style.top = `${position.startY + zoomPosition}px`;\n      } else if (positionY > position.endY - coefficient) {\n        this.zoom.style.top = `${position.endY - dim - zoomPosition}px`;\n        this.lastImg.style.top = `${-position.endY + dim + zoomPosition}px`;\n      }\n\n      if (positionX >= position.startX + coefficient && positionX <= position.endX - coefficient) {\n        this.zoom.style.left = `${positionX - coefficient - zoomPosition}px`;\n        this.lastImg.style.left = `${-positionX + coefficient + zoomPosition}px`;\n      } else if (positionX < position.startX + coefficient) {\n        this.zoom.style.left = `${position.startX - zoomPosition}px`;\n        this.lastImg.style.left = `${position.startX + zoomPosition}px`;\n      } else if (positionX > position.endX - coefficient) {\n        this.zoom.style.left = `${position.endX - dim - zoomPosition}px`;\n        this.lastImg.style.left = `${-position.endX + dim + zoomPosition}px`;\n      }\n    });\n\n    _defineProperty(this, \"move\", event => {\n      let {\n        transform\n      } = this.state;\n\n      if (transform) {\n        this.setState({\n          transform: false\n        });\n      }\n\n      this.HoverSensor(event);\n    });\n\n    this.state = {\n      firstImage: false,\n      lastImage: false,\n      backgroundColor: this.props.backgroundColor || 'transparent',\n      transform: true,\n      images: this.props.images,\n      cursor: this.props.cursor || false,\n      diameter: this.props.diameter || 150,\n      beyond: this.props.beyond || false,\n      width: null,\n      height: null,\n      dim: null,\n      type: this.props.type || 'circle',\n      sensor: {\n        width: null,\n        height: null,\n        top: null,\n        left: null\n      },\n      responsive: this.props.responsive || false,\n      resize: this.props.resize || [{\n        screen: 1199,\n        diameter: 130\n      }, {\n        screen: 991,\n        diameter: 100\n      }, {\n        screen: 767,\n        diameter: 80\n      }, {\n        screen: 575,\n        diameter: 50\n      }]\n    };\n    this.move = this.move.bind(this);\n  }\n\n  render() {\n    let {\n      images,\n      cursor,\n      transform,\n      width,\n      height,\n      dim,\n      sensor,\n      type,\n      backgroundColor\n    } = this.state;\n    let parentClass = cursor ? 'x-ray-photo-parent' : 'x-ray-photo-parent cursor-none';\n    let parentTransform = transform ? 'x-ray-last-photo transform' : 'x-ray-last-photo';\n    let lastImage = transform ? 'x-ray-last-photo-img transform' : 'x-ray-last-photo-img';\n    let lastStyle = {\n      width: `${dim}px`,\n      height: `${dim}px`,\n      backgroundColor\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: parentClass\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      ref: img => {\n        this.firstImg = img;\n      },\n      src: images[0],\n      alt: \"first-photo\",\n      className: \"x-ray-first-photo\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      ref: zoom => {\n        this.zoom = zoom;\n      },\n      className: parentTransform,\n      style: lastStyle\n    }, type === 'magnifyingGlass' ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"magnifyingGlass\"\n    }) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"x-ray-last-photo-img-parent\"\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      ref: img => {\n        this.lastImg = img;\n      },\n      style: {\n        width: `${width}px`,\n        height: `${height}px`\n      },\n      src: images[1],\n      alt: \"last-photo\",\n      className: lastImage\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"x-ray-sensor\",\n      style: sensor,\n      onMouseMove: this.move\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/agenta/Desktop/Adloid/x-ray/src/components/Xray/Xray.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","React","Component","XRay","constructor","props","updateWidthHeight","window","addEventListener","diameter","resize","state","getMaxResWidth","getMaxResize","newDiameter","matchesWindow","responsive","matchMedia","matches","firstImage","lastImage","loadImages","firstImg","then","setState","lastImg","updateResize","catch","error","console","log","img","Promise","resolve","reject","onload","e","onerror","Error","url","beyond","naturalWidth","naturalHeight","percent","width","clientWidth","height","Math","round","dim","getDiameter","sensor","top","left","screen","i","length","event","positionX","nativeEvent","layerX","positionY","layerY","position","startY","endY","startX","endX","coefficient","zoomPosition","zoom","style","transform","HoverSensor","backgroundColor","images","cursor","type","move","bind","render","parentClass","parentTransform","lastStyle","createElement","className","ref","src","alt","onMouseMove"],"mappings":"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","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport './Xray.css';\nexport default class XRay extends Component {\n    constructor(props) {\n        super(props);\n\n        _defineProperty(this, \"componentDidMount\", () => {\n            this.updateWidthHeight();\n            window.addEventListener('resize', this.updateWidthHeight);\n        });\n\n        _defineProperty(this, \"getDiameter\", () => {\n            let {\n                diameter,\n                resize\n            } = this.state;\n            let getMaxResWidth = this.getMaxResize(resize);\n            let newDiameter = this.matchesWindow(resize);\n\n            if (this.state.responsive) {\n                if (window.matchMedia(`(min-width: ${getMaxResWidth + 1}px)`).matches) {\n                    return newDiameter > diameter ? newDiameter : diameter;\n                } else {\n                    return newDiameter;\n                }\n            } else {\n                return diameter;\n            }\n        });\n\n        _defineProperty(this, \"updateWidthHeight\", () => {\n            let {\n                firstImage,\n                lastImage\n            } = this.state;\n\n            if(!firstImage && !lastImage){\n                this.loadImages(this.firstImg).then(()=>{\n                    this.setState({firstImage: true});\n                    this.loadImages(this.lastImg).then(()=>{\n                        this.setState({lastImage: true});\n                        this.updateResize();\n                    }).catch((error)=>{\n                        console.log('error', error);\n                    });\n                }).catch((error)=>{\n                    console.log('error', error);\n                });\n            }else{\n                this.updateResize();\n            }\n        });\n\n        _defineProperty(this, 'loadImages', (img) => {\n            return new Promise(function(resolve, reject){\n                img.onload = (e) => {\n                    resolve(img);\n                };\n\n                img.onerror = (e)=> {\n                    reject(new Error(`Failed to load image's URL: ${url}`));\n                };\n            });\n        });\n\n        _defineProperty(this, 'updateResize', () => {\n            let {\n                beyond,\n                firstImage,\n                lastImage\n            } = this.state;\n\n            if(firstImage && lastImage){\n                let naturalWidth = this.firstImg.naturalWidth;\n                let naturalHeight = this.firstImg.naturalHeight;\n                let percent = naturalWidth / naturalHeight;\n                let width = this.firstImg.clientWidth;\n                let height = Math.round(width / percent);\n                let dim = this.getDiameter();\n                let sensor;\n\n                if (beyond) {\n                    sensor = {\n                        width: width + dim,\n                        height: height + dim,\n                        top: -(dim / 2),\n                        left: -(dim / 2)\n                    };\n                } else {\n                    sensor = {\n                        width: width,\n                        height: height,\n                        top: 0,\n                        left: 0\n                    };\n                }\n\n                this.setState({\n                    width,\n                    height,\n                    dim,\n                    sensor\n                });\n            }\n        });\n\n        _defineProperty(this, \"getMaxResize\", diameter => {\n            let newDiameter = diameter[0].screen;\n\n            for (let i = 0; i < diameter.length; i++) {\n                if (diameter[i].screen > newDiameter) {\n                    newDiameter = diameter[i].screen;\n                }\n            }\n\n            return newDiameter;\n        });\n\n        _defineProperty(this, \"matchesWindow\", diameter => {\n            let newDiameter = diameter[0].diameter;\n\n            for (let i = 0; i < diameter.length; i++) {\n                if (window.matchMedia(`(max-width: ${diameter[i].screen}px)`).matches) {\n                    newDiameter = diameter[i].diameter;\n                }\n            }\n\n            return newDiameter;\n        });\n\n        _defineProperty(this, \"HoverSensor\", event => {\n            let positionX = event.nativeEvent.layerX;\n            let positionY = event.nativeEvent.layerY;\n            let {\n                sensor,\n                dim,\n                beyond\n            } = this.state;\n            let position = {\n                startY: 0,\n                endY: sensor.height,\n                startX: 0,\n                endX: sensor.width\n            };\n            let coefficient = dim / 2;\n            let zoomPosition;\n\n            if (beyond) {\n                zoomPosition = dim / 2;\n            } else {\n                zoomPosition = 0;\n            }\n\n            if (positionY >= position.startY + coefficient && positionY <= position.endY - coefficient) {\n                this.zoom.style.top = `${positionY - coefficient - zoomPosition}px`;\n                this.lastImg.style.top = `${-positionY + coefficient + zoomPosition}px`;\n            } else if (positionY < position.startY + coefficient) {\n                this.zoom.style.top = `${position.startY - zoomPosition}px`;\n                this.lastImg.style.top = `${position.startY + zoomPosition}px`;\n            } else if (positionY > position.endY - coefficient) {\n                this.zoom.style.top = `${position.endY - dim - zoomPosition}px`;\n                this.lastImg.style.top = `${-position.endY + dim + zoomPosition}px`;\n            }\n\n            if (positionX >= position.startX + coefficient && positionX <= position.endX - coefficient) {\n                this.zoom.style.left = `${positionX - coefficient - zoomPosition}px`;\n                this.lastImg.style.left = `${-positionX + coefficient + zoomPosition}px`;\n            } else if (positionX < position.startX + coefficient) {\n                this.zoom.style.left = `${position.startX - zoomPosition}px`;\n                this.lastImg.style.left = `${position.startX + zoomPosition}px`;\n            } else if (positionX > position.endX - coefficient) {\n                this.zoom.style.left = `${position.endX - dim - zoomPosition}px`;\n                this.lastImg.style.left = `${-position.endX + dim + zoomPosition}px`;\n            }\n        });\n\n        _defineProperty(this, \"move\", event => {\n            let {\n                transform\n            } = this.state;\n\n            if (transform) {\n                this.setState({\n                    transform: false\n                });\n            }\n\n            this.HoverSensor(event);\n        });\n\n        this.state = {\n            firstImage: false,\n            lastImage: false,\n            backgroundColor: this.props.backgroundColor || 'transparent',\n            transform: true,\n            images: this.props.images,\n            cursor: this.props.cursor || false,\n            diameter: this.props.diameter || 150,\n            beyond: this.props.beyond || false,\n            width: null,\n            height: null,\n            dim: null,\n            type: this.props.type || 'circle',\n            sensor: {\n                width: null,\n                height: null,\n                top: null,\n                left: null\n            },\n            responsive: this.props.responsive || false,\n            resize: this.props.resize || [{\n                screen: 1199,\n                diameter: 130\n            }, {\n                screen: 991,\n                diameter: 100\n            }, {\n                screen: 767,\n                diameter: 80\n            }, {\n                screen: 575,\n                diameter: 50\n            }]\n        };\n        this.move = this.move.bind(this);\n    }\n\n    render() {\n        let {\n            images,\n            cursor,\n            transform,\n            width,\n            height,\n            dim,\n            sensor,\n            type,\n            backgroundColor\n        } = this.state;\n        let parentClass = cursor ? 'x-ray-photo-parent' : 'x-ray-photo-parent cursor-none';\n        let parentTransform = transform ? 'x-ray-last-photo transform' : 'x-ray-last-photo';\n        let lastImage = transform ? 'x-ray-last-photo-img transform' : 'x-ray-last-photo-img';\n        let lastStyle = {\n            width: `${dim}px`,\n            height: `${dim}px`,\n            backgroundColor\n        };\n        return React.createElement(\"div\", {\n            className: parentClass\n        }, React.createElement(\"img\", {\n            ref: img => {\n                this.firstImg = img;\n            },\n            src: images[0],\n            alt: \"first-photo\",\n            className: \"x-ray-first-photo\"\n        }), React.createElement(\"div\", {\n            ref: zoom => {\n                this.zoom = zoom;\n            },\n            className: parentTransform,\n            style: lastStyle\n        }, type === 'magnifyingGlass' ? React.createElement(\"div\", {\n            className: \"magnifyingGlass\"\n        }) : null, React.createElement(\"div\", {\n            className: \"x-ray-last-photo-img-parent\"\n        }, React.createElement(\"img\", {\n            ref: img => {\n                this.lastImg = img;\n            },\n            style: {\n                width: `${width}px`,\n                height: `${height}px`\n            },\n            src: images[1],\n            alt: \"last-photo\",\n            className: lastImage\n        }))), React.createElement(\"div\", {\n            className: \"x-ray-sensor\",\n            style: sensor,\n            onMouseMove: this.move\n        }));\n    }\n\n}"]},"metadata":{},"sourceType":"module"}