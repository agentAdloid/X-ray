{"ast":null,"code":"var _jsxFileName = \"/home/agenta/Desktop/Adloid/x-ray/src/components/Xray/Xray.js\";\nimport React, { Component } from \"react\";\nimport \"./Xray.css\";\nimport Aux from \"../../hoc/Aux\";\nimport Button from \"../../UI/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class XRay extends Component {\n  constructor(props) {\n    super(props); //console.log('hi');\n    //console.log('bi');\n\n    this.componentDidMount = () => {\n      this.updateWidthHeight();\n      window.addEventListener(\"resize\", this.updateWidthHeight);\n    };\n\n    this.getDiameter = () => {\n      let {\n        diameter,\n        resize\n      } = this.state;\n      let getMaxResWidth = this.getMaxResize(resize);\n      let newDiameter = this.matchesWindow(resize);\n\n      if (this.state.responsive) {\n        if (window.matchMedia(`(min-width: ${getMaxResWidth + 1}px)`).matches) {\n          return newDiameter > diameter ? newDiameter : diameter;\n        } else {\n          return newDiameter;\n        }\n      } else {\n        return diameter;\n      }\n    };\n\n    this.updateWidthHeight = () => {\n      let {\n        beyond\n      } = this.state;\n      let naturalWidth = this.firstImg.naturalWidth;\n      let naturalHeight = this.firstImg.naturalHeight;\n      let percent = naturalWidth / naturalHeight;\n      let width = this.firstImg.clientWidth;\n      let height = Math.round(width / percent);\n      let dim = this.getDiameter(); //console.log(window.screen.width);\n\n      let centerX = 0;\n      let centerY = 0;\n      let sensor;\n\n      if (beyond) {\n        sensor = {\n          width: width + dim,\n          height: height + dim,\n          top: -(dim / 2),\n          left: -(dim / 2)\n        };\n      } else {\n        sensor = {\n          width: width,\n          height: height,\n          top: 0,\n          left: 0\n        };\n      } // console.log(width + ' ' + height + ' ' + dim);\n\n\n      this.setState({\n        width,\n        height,\n        dim,\n        sensor,\n        centerX,\n        centerY\n      });\n    };\n\n    this.getMaxResize = diameter => {\n      let newDiameter = diameter[0].screen;\n\n      for (let i = 0; i < diameter.length; i++) {\n        if (diameter[i].screen > newDiameter) {\n          newDiameter = diameter[i].screen;\n        }\n      }\n\n      return newDiameter;\n    };\n\n    this.matchesWindow = diameter => {\n      let newDiameter = diameter[0].diameter;\n\n      for (let i = 0; i < diameter.length; i++) {\n        if (window.matchMedia(`(max-width: ${diameter[i].screen}px)`).matches) {\n          newDiameter = diameter[i].diameter;\n        }\n      }\n\n      return newDiameter;\n    };\n\n    this.HoverSensor = event => {\n      let positionX = event.layerX + this.centerX;\n      let positionY = event.layerY + this.centerY;\n      console.log(positionX + \" \" + event.layerX);\n      console.log(positionY + \" \" + event.layerY);\n      let {\n        sensor,\n        dim,\n        beyond\n      } = this.state;\n      let position = {\n        startY: 0,\n        endY: sensor.height,\n        startX: 0,\n        endX: sensor.width\n      };\n      let coefficient = dim / 2;\n      let zoomPosition;\n\n      if (beyond) {\n        zoomPosition = dim / 2;\n      } else {\n        zoomPosition = 0;\n      }\n\n      if (positionY >= position.startY + coefficient && positionY <= position.endY - coefficient) {\n        this.zoom.style.top = `${positionY - coefficient - zoomPosition}px`;\n        this.lastImg.style.top = `${-positionY + coefficient + zoomPosition}px`;\n      } else if (positionY < position.startY + coefficient) {\n        this.zoom.style.top = `${position.startY - zoomPosition}px`;\n        this.lastImg.style.top = `${position.startY + zoomPosition}px`;\n      } else if (positionY > position.endY - coefficient) {\n        this.zoom.style.top = `${position.endY - dim - zoomPosition}px`;\n        this.lastImg.style.top = `${-position.endY + dim + zoomPosition}px`;\n      }\n\n      if (positionX >= position.startX + coefficient && positionX <= position.endX - coefficient) {\n        this.zoom.style.left = `${positionX - coefficient - zoomPosition}px`;\n        this.lastImg.style.left = `${-positionX + coefficient + zoomPosition}px`;\n      } else if (positionX < position.startX + coefficient) {\n        this.zoom.style.left = `${position.startX - zoomPosition}px`;\n        this.lastImg.style.left = `${position.startX + zoomPosition}px`;\n      } else if (positionX > position.endX - coefficient) {\n        this.zoom.style.left = `${position.endX - dim - zoomPosition}px`;\n        this.lastImg.style.left = `${-position.endX + dim + zoomPosition}px`;\n      }\n\n      this.setState({\n        centerX: event.layerX,\n        centerY: event.layerY\n      }); // console.log(this.zoom.style.left + ' xx  ' + positionX + ' endxx' + position.endX);\n      //console.log(this.zoom.style.top + ' yy ' + positionY + 'endyy' + position.endY);\n    };\n\n    this.move = event => {\n      let {\n        transform\n      } = this.state;\n\n      if (transform) {\n        this.setState({\n          transform: false\n        });\n      }\n\n      this.HoverSensor(event);\n    };\n\n    this.onLeftPress = () => {\n      this.move({\n        layerX: this.state.centerX - 10,\n        layerY: this.state.centerY\n      });\n    };\n\n    this.onRightPress = () => {\n      this.move({\n        layerX: this.state.centerX + 10,\n        layerY: this.state.centerY\n      });\n    };\n\n    this.onTopPress = () => {\n      this.move({\n        layerX: this.state.centerX,\n        layerY: this.state.centerY - 10\n      });\n    };\n\n    this.onBottomPress = () => {\n      this.move({\n        layerX: this.state.centerX,\n        layerY: this.state.centerY + 10\n      });\n    };\n\n    this.state = {\n      transform: true,\n      images: this.props.images,\n      cursor: this.props.cursor || false,\n      diameter: this.props.diameter || 150,\n      beyond: this.props.beyond || false,\n      width: null,\n      height: null,\n      dim: null,\n      type: this.props.type || \"circle\",\n      sensor: {\n        width: null,\n        height: null,\n        top: null,\n        left: null\n      },\n      responsive: this.props.responsive || false,\n      resize: this.props.resize || [{\n        screen: 1199,\n        diameter: 130\n      }, {\n        screen: 991,\n        diameter: 100\n      }, {\n        screen: 767,\n        diameter: 80\n      }, {\n        screen: 575,\n        diameter: 50\n      }],\n      centerX: 0,\n      centerY: 0\n    };\n    this.move = this.move.bind(this);\n  }\n\n  render() {\n    let {\n      images,\n      cursor,\n      transform,\n      width,\n      height,\n      dim,\n      sensor,\n      type\n    } = this.state;\n    let parentClass = cursor ? \"x-ray-photo-parent\" : \"x-ray-photo-parent cursor-none\";\n    let parentTransform = transform ? \"x-ray-last-photo transform\" : \"x-ray-last-photo\";\n    let lastImage = transform ? \"x-ray-last-photo-img transform\" : \"x-ray-last-photo-img\";\n    let lastStyle = {\n      width: `${dim}px`,\n      height: `${dim}px`\n    };\n    return /*#__PURE__*/_jsxDEV(Aux, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: parentClass,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          ref: img => {\n            this.firstImg = img; //console.log(\"image1\");\n            //if(img!=null)\n            // {console.log(this.firstImg.style.top);\n            // console.log(this.firstImg.style.left);\n            //}\n          },\n          src: images[0],\n          alt: \"first-photo\",\n          className: \"x-ray-first-photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: zoom => {\n            this.zoom = zoom; //console.log(zoom);\n          },\n          className: parentTransform,\n          style: lastStyle,\n          children: [type === \"magnifyingGlass\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"magnifyingGlass\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"x-ray-last-photo-img-parent\",\n            ref: box => {\n              this.centerX = 250;\n              this.centerY = 250;\n\n              if (box != null) {\n                const rect = box.getBoundingClientRect();\n                this.centerX = rect.x + Math.round(rect.width / 2);\n                this.centerX = rect.y + Math.round(rect.height / 2);\n              } //console.log('hi');\n\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              ref: img => {\n                this.lastImg = img; ///console.log(img + \"image2\");\n              },\n              style: {\n                width: `${width}px`,\n                height: `${height}px`\n              },\n              src: images[1],\n              alt: \"last-photo\",\n              className: lastImage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"x-ray-sensor\",\n          style: sensor,\n          onMouseMove: this.move\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          clicked: this.onLeftPress,\n          children: \"Left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          clicked: this.onRightPress,\n          children: \"Right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          clicked: this.onBottomPress,\n          children: \"Bottom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          clicked: this.onTopPress,\n          children: \"Top\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/agenta/Desktop/Adloid/x-ray/src/components/Xray/Xray.js"],"names":["React","Component","Aux","Button","XRay","constructor","props","componentDidMount","updateWidthHeight","window","addEventListener","getDiameter","diameter","resize","state","getMaxResWidth","getMaxResize","newDiameter","matchesWindow","responsive","matchMedia","matches","beyond","naturalWidth","firstImg","naturalHeight","percent","width","clientWidth","height","Math","round","dim","centerX","centerY","sensor","top","left","setState","screen","i","length","HoverSensor","event","positionX","layerX","positionY","layerY","console","log","position","startY","endY","startX","endX","coefficient","zoomPosition","zoom","style","lastImg","move","transform","onLeftPress","onRightPress","onTopPress","onBottomPress","images","cursor","type","bind","render","parentClass","parentTransform","lastImage","lastStyle","img","box","rect","getBoundingClientRect","x","y"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Xray.css\";\nimport Aux from \"../../hoc/Aux\";\nimport Button from \"../../UI/Button\";\nexport default class XRay extends Component {\n  constructor(props) {\n    super(props);\n    //console.log('hi');\n    //console.log('bi');\n    this.state = {\n      transform: true,\n      images: this.props.images,\n      cursor: this.props.cursor || false,\n      diameter: this.props.diameter || 150,\n      beyond: this.props.beyond || false,\n      width: null,\n      height: null,\n      dim: null,\n      type: this.props.type || \"circle\",\n      sensor: {\n        width: null,\n        height: null,\n        top: null,\n        left: null,\n      },\n      responsive: this.props.responsive || false,\n      resize: this.props.resize || [\n        {\n          screen: 1199,\n          diameter: 130,\n        },\n        {\n          screen: 991,\n          diameter: 100,\n        },\n        {\n          screen: 767,\n          diameter: 80,\n        },\n        {\n          screen: 575,\n          diameter: 50,\n        },\n      ],\n      centerX: 0,\n      centerY: 0,\n    };\n    this.move = this.move.bind(this);\n  }\n\n  componentDidMount = () => {\n    this.updateWidthHeight();\n    window.addEventListener(\"resize\", this.updateWidthHeight);\n  };\n\n  /**\n   * get diameter\n   * @returns {*}\n   */\n\n  getDiameter = () => {\n    let { diameter, resize } = this.state;\n    let getMaxResWidth = this.getMaxResize(resize);\n    let newDiameter = this.matchesWindow(resize);\n    if (this.state.responsive) {\n      if (window.matchMedia(`(min-width: ${getMaxResWidth + 1}px)`).matches) {\n        return newDiameter > diameter ? newDiameter : diameter;\n      } else {\n        return newDiameter;\n      }\n    } else {\n      return diameter;\n    }\n  };\n\n  /**\n   * update width and height\n   */\n\n  updateWidthHeight = () => {\n    let { beyond } = this.state;\n    let naturalWidth = this.firstImg.naturalWidth;\n    let naturalHeight = this.firstImg.naturalHeight;\n    let percent = naturalWidth / naturalHeight;\n    let width = this.firstImg.clientWidth;\n    let height = Math.round(width / percent);\n    let dim = this.getDiameter();\n    //console.log(window.screen.width);\n    let centerX = 0;\n    let centerY = 0;\n    let sensor;\n\n    if (beyond) {\n      sensor = {\n        width: width + dim,\n        height: height + dim,\n        top: -(dim / 2),\n        left: -(dim / 2),\n      };\n    } else {\n      sensor = {\n        width: width,\n        height: height,\n        top: 0,\n        left: 0,\n      };\n    }\n    // console.log(width + ' ' + height + ' ' + dim);\n    this.setState({\n      width,\n      height,\n      dim,\n      sensor,\n      centerX,\n      centerY,\n    });\n  };\n\n  /**\n   * get max width for diameter\n   * @param diameter\n   * @returns {number|Screen}\n   */\n\n  getMaxResize = (diameter) => {\n    let newDiameter = diameter[0].screen;\n    for (let i = 0; i < diameter.length; i++) {\n      if (diameter[i].screen > newDiameter) {\n        newDiameter = diameter[i].screen;\n      }\n    }\n    return newDiameter;\n  };\n\n  /**\n   * @param diameter\n   * @returns {number|Screen}\n   */\n\n  matchesWindow = (diameter) => {\n    let newDiameter = diameter[0].diameter;\n    for (let i = 0; i < diameter.length; i++) {\n      if (window.matchMedia(`(max-width: ${diameter[i].screen}px)`).matches) {\n        newDiameter = diameter[i].diameter;\n      }\n    }\n    return newDiameter;\n  };\n\n  /**\n   * hover sensor get position zoom and photo\n   * @param event\n   */\n\n  HoverSensor = (event) => {\n    let positionX = event.layerX + this.centerX;\n    let positionY = event.layerY + this.centerY;\n    console.log(positionX + \" \" + event.layerX);\n    console.log(positionY + \" \" + event.layerY);\n    let { sensor, dim, beyond } = this.state;\n\n    let position = {\n      startY: 0,\n      endY: sensor.height,\n      startX: 0,\n      endX: sensor.width,\n    };\n\n    let coefficient = dim / 2;\n\n    let zoomPosition;\n\n    if (beyond) {\n      zoomPosition = dim / 2;\n    } else {\n      zoomPosition = 0;\n    }\n\n    if (\n      positionY >= position.startY + coefficient &&\n      positionY <= position.endY - coefficient\n    ) {\n      this.zoom.style.top = `${positionY - coefficient - zoomPosition}px`;\n      this.lastImg.style.top = `${-positionY + coefficient + zoomPosition}px`;\n    } else if (positionY < position.startY + coefficient) {\n      this.zoom.style.top = `${position.startY - zoomPosition}px`;\n      this.lastImg.style.top = `${position.startY + zoomPosition}px`;\n    } else if (positionY > position.endY - coefficient) {\n      this.zoom.style.top = `${position.endY - dim - zoomPosition}px`;\n      this.lastImg.style.top = `${-position.endY + dim + zoomPosition}px`;\n    }\n\n    if (\n      positionX >= position.startX + coefficient &&\n      positionX <= position.endX - coefficient\n    ) {\n      this.zoom.style.left = `${positionX - coefficient - zoomPosition}px`;\n      this.lastImg.style.left = `${-positionX + coefficient + zoomPosition}px`;\n    } else if (positionX < position.startX + coefficient) {\n      this.zoom.style.left = `${position.startX - zoomPosition}px`;\n      this.lastImg.style.left = `${position.startX + zoomPosition}px`;\n    } else if (positionX > position.endX - coefficient) {\n      this.zoom.style.left = `${position.endX - dim - zoomPosition}px`;\n      this.lastImg.style.left = `${-position.endX + dim + zoomPosition}px`;\n    }\n    this.setState({ centerX: event.layerX, centerY: event.layerY });\n    // console.log(this.zoom.style.left + ' xx  ' + positionX + ' endxx' + position.endX);\n    //console.log(this.zoom.style.top + ' yy ' + positionY + 'endyy' + position.endY);\n  };\n\n  /**\n   * move mouse\n   * @param event\n   */\n\n  move = (event) => {\n    let { transform } = this.state;\n    if (transform) {\n      this.setState({\n        transform: false,\n      });\n    }\n\n    this.HoverSensor(event);\n  };\n  onLeftPress = () => {\n    this.move({\n      layerX: this.state.centerX - 10,\n      layerY: this.state.centerY,\n    });\n  };\n  onRightPress = () => {\n    this.move({\n      layerX: this.state.centerX + 10,\n      layerY: this.state.centerY,\n    });\n  };\n  onTopPress = () => {\n    this.move({\n      layerX: this.state.centerX,\n      layerY: this.state.centerY - 10,\n    });\n  };\n  onBottomPress = () => {\n    this.move({\n      layerX: this.state.centerX,\n      layerY: this.state.centerY + 10,\n    });\n  };\n  render() {\n    let { images, cursor, transform, width, height, dim, sensor, type } =\n      this.state;\n    let parentClass = cursor\n      ? \"x-ray-photo-parent\"\n      : \"x-ray-photo-parent cursor-none\";\n    let parentTransform = transform\n      ? \"x-ray-last-photo transform\"\n      : \"x-ray-last-photo\";\n    let lastImage = transform\n      ? \"x-ray-last-photo-img transform\"\n      : \"x-ray-last-photo-img\";\n    let lastStyle = {\n      width: `${dim}px`,\n      height: `${dim}px`,\n    };\n    return (\n      <Aux>\n        <div className={parentClass}>\n          <img\n            ref={(img) => {\n              this.firstImg = img;\n              //console.log(\"image1\");\n              //if(img!=null)\n              // {console.log(this.firstImg.style.top);\n              // console.log(this.firstImg.style.left);\n              //}\n            }}\n            src={images[0]}\n            alt=\"first-photo\"\n            className=\"x-ray-first-photo\"\n          />\n          <div\n            ref={(zoom) => {\n              this.zoom = zoom;\n              //console.log(zoom);\n            }}\n            className={parentTransform}\n            style={lastStyle}\n          >\n            {type === \"magnifyingGlass\" ? (\n              <div className=\"magnifyingGlass\"></div>\n            ) : null}\n            <div\n              className=\"x-ray-last-photo-img-parent\"\n              ref={(box) => {\n                this.centerX = 250;\n                this.centerY = 250;\n                if (box != null) {\n                  const rect = box.getBoundingClientRect();\n                  this.centerX = rect.x + Math.round(rect.width / 2);\n                  this.centerX = rect.y + Math.round(rect.height / 2);\n                }\n                //console.log('hi');\n              }}\n            >\n              <img\n                ref={(img) => {\n                  this.lastImg = img;\n                  ///console.log(img + \"image2\");\n                }}\n                style={{ width: `${width}px`, height: `${height}px` }}\n                src={images[1]}\n                alt=\"last-photo\"\n                className={lastImage}\n              />\n            </div>\n          </div>\n          <div\n            className=\"x-ray-sensor\"\n            style={sensor}\n            onMouseMove={this.move}\n          ></div>\n        </div>\n        <div className=\"Buttons\">\n          <Button clicked={this.onLeftPress}>Left</Button>\n          <Button clicked={this.onRightPress}>Right</Button>\n          <Button clicked={this.onBottomPress}>Bottom</Button>\n          <Button clicked={this.onTopPress}>Top</Button>\n        </div>\n      </Aux>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}