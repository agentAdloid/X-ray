{"ast":null,"code":"var _jsxFileName = \"/home/agenta/Desktop/Adloid/x-ray/src/components/Xray/Xray.js\";\nimport React, { Component } from 'react';\nimport './Xray.css';\nimport Aux from '../../hoc/Aux';\nimport Button from '../../UI/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class XRay extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.updateWidthHeight();\n      window.addEventListener('resize', this.updateWidthHeight);\n    };\n\n    this.getDiameter = () => {\n      let {\n        diameter,\n        resize\n      } = this.state;\n      let getMaxResWidth = this.getMaxResize(resize);\n      let newDiameter = this.matchesWindow(resize);\n\n      if (this.state.responsive) {\n        if (window.matchMedia(`(min-width: ${getMaxResWidth + 1}px)`).matches) {\n          return newDiameter > diameter ? newDiameter : diameter;\n        } else {\n          return newDiameter;\n        }\n      } else {\n        return diameter;\n      }\n    };\n\n    this.updateWidthHeight = () => {\n      let {\n        beyond\n      } = this.state;\n      let naturalWidth = this.firstImg.naturalWidth;\n      let naturalHeight = this.firstImg.naturalHeight;\n      let percent = naturalWidth / naturalHeight;\n      let width = this.firstImg.clientWidth;\n      let height = Math.round(width / percent);\n      let dim = this.getDiameter();\n      let sensor;\n\n      if (beyond) {\n        sensor = {\n          width: width + dim,\n          height: height + dim,\n          top: -(dim / 2),\n          left: -(dim / 2)\n        };\n      } else {\n        sensor = {\n          width: width,\n          height: height,\n          top: 0,\n          left: 0\n        };\n      }\n\n      this.setState({\n        width,\n        height,\n        dim,\n        sensor\n      });\n    };\n\n    this.getMaxResize = diameter => {\n      let newDiameter = diameter[0].screen;\n\n      for (let i = 0; i < diameter.length; i++) {\n        if (diameter[i].screen > newDiameter) {\n          newDiameter = diameter[i].screen;\n        }\n      }\n\n      return newDiameter;\n    };\n\n    this.matchesWindow = diameter => {\n      let newDiameter = diameter[0].diameter;\n\n      for (let i = 0; i < diameter.length; i++) {\n        if (window.matchMedia(`(max-width: ${diameter[i].screen}px)`).matches) {\n          newDiameter = diameter[i].diameter;\n        }\n      }\n\n      return newDiameter;\n    };\n\n    this.HoverSensor = event => {\n      let positionX = event.nativeEvent.layerX;\n      let positionY = event.nativeEvent.layerY;\n      let {\n        sensor,\n        dim,\n        beyond\n      } = this.state;\n      let position = {\n        startY: 0,\n        endY: sensor.height,\n        startX: 0,\n        endX: sensor.width\n      };\n      let coefficient = dim / 2;\n      let zoomPosition;\n\n      if (beyond) {\n        zoomPosition = dim / 2;\n      } else {\n        zoomPosition = 0;\n      }\n\n      if (positionY >= position.startY + coefficient && positionY <= position.endY - coefficient) {\n        this.zoom.style.top = `${positionY - coefficient - zoomPosition}px`;\n        this.lastImg.style.top = `${-positionY + coefficient + zoomPosition}px`;\n      } else if (positionY < position.startY + coefficient) {\n        this.zoom.style.top = `${position.startY - zoomPosition}px`;\n        this.lastImg.style.top = `${position.startY + zoomPosition}px`;\n      } else if (positionY > position.endY - coefficient) {\n        this.zoom.style.top = `${position.endY - dim - zoomPosition}px`;\n        this.lastImg.style.top = `${-position.endY + dim + zoomPosition}px`;\n      }\n\n      if (positionX >= position.startX + coefficient && positionX <= position.endX - coefficient) {\n        this.zoom.style.left = `${positionX - coefficient - zoomPosition}px`;\n        this.lastImg.style.left = `${-positionX + coefficient + zoomPosition}px`;\n      } else if (positionX < position.startX + coefficient) {\n        this.zoom.style.left = `${position.startX - zoomPosition}px`;\n        this.lastImg.style.left = `${position.startX + zoomPosition}px`;\n      } else if (positionX > position.endX - coefficient) {\n        this.zoom.style.left = `${position.endX - dim - zoomPosition}px`;\n        this.lastImg.style.left = `${-position.endX + dim + zoomPosition}px`;\n      }\n    };\n\n    this.move = event => {\n      let {\n        transform\n      } = this.state;\n\n      if (transform) {\n        this.setState({\n          transform: false\n        });\n      }\n\n      this.HoverSensor(event);\n    };\n\n    this.state = {\n      transform: true,\n      images: this.props.images,\n      cursor: this.props.cursor || false,\n      diameter: this.props.diameter || 150,\n      beyond: this.props.beyond || false,\n      width: null,\n      height: null,\n      dim: null,\n      type: this.props.type || 'circle',\n      sensor: {\n        width: null,\n        height: null,\n        top: null,\n        left: null\n      },\n      responsive: this.props.responsive || false,\n      resize: this.props.resize || [{\n        screen: 1199,\n        diameter: 130\n      }, {\n        screen: 991,\n        diameter: 100\n      }, {\n        screen: 767,\n        diameter: 80\n      }, {\n        screen: 575,\n        diameter: 50\n      }]\n    };\n    this.move = this.move.bind(this);\n  }\n\n  render() {\n    let {\n      images,\n      cursor,\n      transform,\n      width,\n      height,\n      dim,\n      sensor,\n      type\n    } = this.state;\n    let parentClass = cursor ? 'x-ray-photo-parent' : 'x-ray-photo-parent cursor-none';\n    let parentTransform = transform ? 'x-ray-last-photo transform' : 'x-ray-last-photo';\n    let lastImage = transform ? 'x-ray-last-photo-img transform' : 'x-ray-last-photo-img';\n    let lastStyle = {\n      width: `${dim}px`,\n      height: `${dim}px`\n    };\n    return /*#__PURE__*/_jsxDEV(Aux, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: parentClass,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          ref: img => {\n            this.firstImg = img;\n          },\n          src: images[0],\n          alt: \"first-photo\",\n          className: \"x-ray-first-photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: zoom => {\n            this.zoom = zoom;\n          },\n          className: parentTransform,\n          style: lastStyle,\n          children: [type === 'magnifyingGlass' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"magnifyingGlass\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 29\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"x-ray-last-photo-img-parent\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              ref: img => {\n                this.lastImg = img;\n              },\n              style: {\n                width: `${width}px`,\n                height: `${height}px`\n              },\n              src: images[1],\n              alt: \"last-photo\",\n              className: lastImage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"x-ray-sensor\",\n          style: sensor,\n          onMouseMove: this.move\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          clicked: console.log('move'),\n          children: \"Left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          clicked: console.log('move'),\n          children: \"Right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          clicked: console.log('move'),\n          children: \"Bottom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          clicked: console.log('move'),\n          children: \"Top\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/agenta/Desktop/Adloid/x-ray/src/components/Xray/Xray.js"],"names":["React","Component","Aux","Button","XRay","constructor","props","componentDidMount","updateWidthHeight","window","addEventListener","getDiameter","diameter","resize","state","getMaxResWidth","getMaxResize","newDiameter","matchesWindow","responsive","matchMedia","matches","beyond","naturalWidth","firstImg","naturalHeight","percent","width","clientWidth","height","Math","round","dim","sensor","top","left","setState","screen","i","length","HoverSensor","event","positionX","nativeEvent","layerX","positionY","layerY","position","startY","endY","startX","endX","coefficient","zoomPosition","zoom","style","lastImg","move","transform","images","cursor","type","bind","render","parentClass","parentTransform","lastImage","lastStyle","img","console","log"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react';\nimport './Xray.css';\nimport Aux from '../../hoc/Aux';\nimport Button from '../../UI/Button';\nexport default class XRay extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            transform: true,\n            images: this.props.images,\n            cursor: this.props.cursor || false,\n            diameter: this.props.diameter || 150,\n            beyond: this.props.beyond || false,\n            width: null,\n            height: null,\n            dim: null,\n            type: this.props.type || 'circle',\n            sensor: {\n                width: null,\n                height: null,\n                top: null,\n                left: null\n            },\n            responsive: this.props.responsive || false,\n            resize: this.props.resize || [\n                {\n                    screen: 1199,\n                    diameter: 130\n                },\n                {\n                    screen: 991,\n                    diameter: 100\n                },\n                {\n                    screen: 767,\n                    diameter: 80\n                },\n                {\n                    screen: 575,\n                    diameter: 50\n                }\n            ]\n        };\n        this.move = this.move.bind(this);\n    }\n\n    componentDidMount = () =>{\n        this.updateWidthHeight();\n        window.addEventListener('resize', this.updateWidthHeight)\n    };\n\n    /**\n     * get diameter\n     * @returns {*}\n     */\n\n    getDiameter = () => {\n        let {diameter, resize} = this.state;\n        let getMaxResWidth = this.getMaxResize(resize);\n        let newDiameter = this.matchesWindow(resize);\n        if(this.state.responsive){\n            if(window.matchMedia(`(min-width: ${getMaxResWidth + 1}px)`).matches){\n                return (newDiameter > diameter)?(newDiameter):(diameter);\n            }else{\n                return newDiameter;\n            }\n        }else{\n            return diameter;\n        }\n    };\n\n    /**\n     * update width and height\n     */\n\n    updateWidthHeight = () => {\n        let {beyond} = this.state;\n        let naturalWidth = this.firstImg.naturalWidth;\n        let naturalHeight = this.firstImg.naturalHeight;\n        let percent = naturalWidth / naturalHeight;\n        let width = this.firstImg.clientWidth;\n        let height = Math.round((width / percent));\n        let dim = this.getDiameter();\n\n        let sensor;\n\n        if(beyond){\n            sensor = {\n                width: width + dim,\n                height: height + dim,\n                top: -(dim / 2),\n                left: -(dim / 2)\n            }\n        }else{\n            sensor = {\n                width: width,\n                height: height,\n                top: 0,\n                left: 0\n            }\n        }\n\n        this.setState({\n            width,\n            height,\n            dim,\n            sensor\n        });\n    };\n\n    /**\n     * get max width for diameter\n     * @param diameter\n     * @returns {number|Screen}\n     */\n\n    getMaxResize = (diameter) => {\n        let newDiameter = diameter[0].screen;\n        for(let i = 0; i < diameter.length; i++){\n            if(diameter[i].screen > newDiameter){\n                newDiameter = diameter[i].screen;\n            }\n        }\n        return newDiameter;\n    };\n\n    /**\n     * @param diameter\n     * @returns {number|Screen}\n     */\n\n    matchesWindow = (diameter) => {\n        let newDiameter = diameter[0].diameter;\n        for(let i = 0; i < diameter.length; i++){\n            if(window.matchMedia(`(max-width: ${diameter[i].screen}px)`).matches){\n                newDiameter = diameter[i].diameter;\n            }\n        }\n        return newDiameter;\n    };\n\n    /**\n     * hover sensor get position zoom and photo\n     * @param event\n     */\n\n    HoverSensor = (event) => {\n\n        let positionX = event.nativeEvent.layerX;\n        let positionY = event.nativeEvent.layerY;\n\n        let {sensor, dim, beyond} = this.state;\n\n        let position = {\n            startY: 0,\n            endY: sensor.height,\n            startX: 0,\n            endX: sensor.width\n        };\n\n        let coefficient = dim / 2;\n\n        let zoomPosition;\n\n        if(beyond){\n            zoomPosition = dim / 2;\n        }else{\n            zoomPosition = 0;\n        }\n\n        if((positionY >= position.startY + coefficient) && (positionY <= position.endY - coefficient)){\n            this.zoom.style.top = `${positionY - coefficient - zoomPosition}px`;\n            this.lastImg.style.top = `${-positionY + coefficient + zoomPosition}px`;\n        }else if(positionY < position.startY + coefficient){\n            this.zoom.style.top = `${position.startY - zoomPosition}px`;\n            this.lastImg.style.top = `${position.startY + zoomPosition}px`;\n        }else if(positionY > position.endY - coefficient){\n            this.zoom.style.top = `${position.endY - dim - zoomPosition}px`;\n            this.lastImg.style.top = `${-position.endY + dim + zoomPosition}px`;\n        }\n\n        if((positionX >= position.startX + coefficient) && (positionX <= position.endX - coefficient)){\n            this.zoom.style.left = `${positionX - coefficient - zoomPosition}px`;\n            this.lastImg.style.left = `${-positionX + coefficient + zoomPosition}px`;\n        }else if(positionX < position.startX + coefficient){\n            this.zoom.style.left = `${position.startX - zoomPosition}px`;\n            this.lastImg.style.left = `${position.startX + zoomPosition}px`;\n        }else if(positionX > position.endX - coefficient){\n            this.zoom.style.left = `${position.endX - dim - zoomPosition}px`;\n            this.lastImg.style.left = `${-position.endX +  dim + zoomPosition}px`;\n        }\n    };\n\n    /**\n     * move mouse\n     * @param event\n     */\n\n    move = (event) => {\n        let {transform} = this.state;\n        if(transform){\n            this.setState({\n                transform: false\n            });\n        }\n\n        this.HoverSensor(event);\n    };\n\n    render(){\n        let {\n            images,\n            cursor,\n            transform,\n            width,\n            height,\n            dim,\n            sensor,\n            type\n        } = this.state;\n        let parentClass = (cursor)?('x-ray-photo-parent'):('x-ray-photo-parent cursor-none');\n        let parentTransform = (transform)?('x-ray-last-photo transform'):('x-ray-last-photo');\n        let lastImage = (transform)?('x-ray-last-photo-img transform'):('x-ray-last-photo-img');\n        let lastStyle = {\n            width: `${dim}px`,\n            height: `${dim}px`\n        };\n        return(\n            <Aux>\n            <div className={parentClass}>\n                <img\n                    ref={(img)=>{\n                        this.firstImg = img;\n                    }}\n                    src={images[0]}\n                    alt=\"first-photo\"\n                    className=\"x-ray-first-photo\"\n                />\n                <div\n                    ref={(zoom)=>{\n                        this.zoom = zoom;\n                    }}\n                    className={parentTransform}\n                    style={lastStyle}\n                >\n                    {\n                        (type === 'magnifyingGlass')?(\n                            <div className=\"magnifyingGlass\"></div>\n                        ):(null)\n                    }\n                    <div className=\"x-ray-last-photo-img-parent\">\n                        <img\n                            ref={(img)=>{\n                                this.lastImg = img;\n                            }}\n                            style={{width: `${width}px`, height: `${height}px`}}\n                            src={images[1]}\n                            alt=\"last-photo\"\n                            className={lastImage}\n                        />\n                    </div>\n                </div>\n                <div className=\"x-ray-sensor\" style={sensor} onMouseMove={this.move}></div>\n            </div>\n            <div className=\"Buttons\">\n                <Button clicked={console.log('move')}>Left</Button>\n                <Button clicked={console.log('move')}>Right</Button>\n                <Button clicked={console.log('move')}>Bottom</Button>\n                <Button clicked={console.log('move')}>Top</Button>\n            </div>\n            </Aux>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}